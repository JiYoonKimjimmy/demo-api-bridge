package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"net/url"
	"os"
	"strings"
	"time"

	_ "github.com/sijms/go-ora/v2"
)

func main() {
	// Oracle DB Ïó∞Í≤∞ Ï†ïÎ≥¥ (config.yaml Í∏∞Î∞ò)
	host := "dev1-db.konadc.com"
	port := 15322
	sid := "kmdbp19"
	username := "map"
	password := "StgMAP1104#"

	// DSN ÏÉùÏÑ± (Ìå®Ïä§ÏõåÎìú URL Ïù∏ÏΩîÎî©)
	encodedPassword := url.QueryEscape(password)
	dsn := fmt.Sprintf("oracle://%s:%s@%s:%d/%s", username, encodedPassword, host, port, sid)

	// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
	log.Println("Connecting to Oracle database...")
	db, err := sql.Open("oracle", dsn)
	if err != nil {
		log.Fatalf("Failed to open database: %v", err)
	}
	defer db.Close()

	// Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := db.PingContext(ctx); err != nil {
		log.Fatalf("Failed to ping database: %v", err)
	}
	log.Println("‚úÖ Connected to database successfully")

	// SQL ÌååÏùº ÏùΩÍ∏∞
	sqlFile := "scripts/create_tables.sql"
	log.Printf("Reading SQL file: %s", sqlFile)

	content, err := os.ReadFile(sqlFile)
	if err != nil {
		log.Fatalf("Failed to read SQL file: %v", err)
	}

	// SQL Î¨∏ÏùÑ ÌååÏã±
	statements := parseSQL(string(content))

	// Í∞Å SQL Î¨∏ Ïã§Ìñâ
	successCount := 0
	skipCount := 0
	errorCount := 0

	for i, stmt := range statements {
		log.Printf("Executing statement %d...", i+1)
		log.Printf("Statement preview: %s...", stmt[:min(80, len(stmt))])

		_, err := db.ExecContext(ctx, stmt)
		if err != nil {
			// Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÌÖåÏù¥Î∏î ÏóêÎü¨Îäî Î¨¥Ïãú
			errMsg := err.Error()
			if strings.Contains(errMsg, "ORA-00955") { // name is already used
				log.Printf("‚ö†Ô∏è  Statement %d already exists, skipped", i+1)
				skipCount++
				continue
			}

			log.Printf("‚ùå Error executing statement %d: %v", i+1, err)
			errorCount++
			continue
		}

		successCount++
		log.Printf("‚úÖ Statement %d executed successfully", i+1)
	}

	// Í≤∞Í≥º Ï∂úÎ†•
	log.Println("\n" + strings.Repeat("=", 50))
	log.Printf("‚úÖ Successfully executed: %d statements", successCount)
	log.Printf("‚ö†Ô∏è  Skipped: %d statements", skipCount)
	log.Printf("‚ùå Failed: %d statements", errorCount)
	log.Println(strings.Repeat("=", 50))

	if errorCount > 0 {
		log.Println("\n‚ö†Ô∏è  Some statements failed. Please check the errors above.")
		os.Exit(1)
	}

	log.Println("\nüéâ Database initialization completed successfully!")
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// parseSQLÏùÄ SQL ÌååÏùº ÎÇ¥Ïö©ÏùÑ Í∞úÎ≥Ñ SQL Î¨∏ÏúºÎ°ú ÌååÏã±Ìï©ÎãàÎã§
func parseSQL(content string) []string {
	var statements []string
	var currentStmt strings.Builder
	inBlockComment := false
	lines := strings.Split(content, "\n")

	for _, line := range lines {
		trimmedLine := strings.TrimSpace(line)

		// Î∏îÎ°ù Ï£ºÏÑù ÏãúÏûë
		if strings.HasPrefix(trimmedLine, "/*") {
			inBlockComment = true
		}

		// Î∏îÎ°ù Ï£ºÏÑù Ï§ëÏù¥Í±∞ÎÇò Ìïú Ï§Ñ Ï£ºÏÑùÏù¥Î©¥ Ïä§ÌÇµ
		if inBlockComment || strings.HasPrefix(trimmedLine, "--") {
			// Î∏îÎ°ù Ï£ºÏÑù Ï¢ÖÎ£å ÌôïÏù∏
			if strings.HasSuffix(trimmedLine, "*/") {
				inBlockComment = false
			}
			continue
		}

		// Îπà Ï§ÑÏù¥Î©¥ Ïä§ÌÇµ
		if trimmedLine == "" {
			continue
		}

		// ÌòÑÏû¨ Î¨∏Ïû•Ïóê Ï∂îÍ∞Ä
		if currentStmt.Len() > 0 {
			currentStmt.WriteString(" ")
		}
		currentStmt.WriteString(trimmedLine)

		// ÏÑ∏ÎØ∏ÏΩúÎ°†ÏúºÎ°ú ÎÅùÎÇòÎ©¥ Î¨∏Ïû• ÏôÑÎ£å
		if strings.HasSuffix(trimmedLine, ";") {
			stmt := strings.TrimSpace(strings.TrimSuffix(currentStmt.String(), ";"))

			// DDL Î¨∏Ïù∏ÏßÄ ÌôïÏù∏
			upperStmt := strings.ToUpper(stmt)
			if strings.HasPrefix(upperStmt, "CREATE") ||
				strings.HasPrefix(upperStmt, "ALTER") ||
				strings.HasPrefix(upperStmt, "DROP") ||
				strings.HasPrefix(upperStmt, "COMMENT") {
				statements = append(statements, stmt)
			}

			currentStmt.Reset()
		}
	}

	// ÎßàÏßÄÎßâ Î¨∏Ïû•Ïù¥ ÏÑ∏ÎØ∏ÏΩúÎ°† ÏóÜÏù¥ ÎÅùÎÇú Í≤ΩÏö∞
	if currentStmt.Len() > 0 {
		stmt := strings.TrimSpace(currentStmt.String())
		upperStmt := strings.ToUpper(stmt)
		if strings.HasPrefix(upperStmt, "CREATE") ||
			strings.HasPrefix(upperStmt, "ALTER") ||
			strings.HasPrefix(upperStmt, "DROP") ||
			strings.HasPrefix(upperStmt, "COMMENT") {
			statements = append(statements, stmt)
		}
	}

	return statements
}
